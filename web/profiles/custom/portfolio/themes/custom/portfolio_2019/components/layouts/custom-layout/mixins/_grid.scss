/// Custom grid system based on bootstrap.
//
// Generate semantic grid columns with these mixins.

// Base common container CSS.
@mixin make-container() {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
}

// For a specific breakpoint, define the maximum width of the container in a media query.
@mixin make-container-max-widths($current-bkpt, $breakpoints: $grid-settings) {
  $max-width: breakpoint-get-value($current-bkpt, 'container-max-width');
  @if ($max-width) {
    @include respond-to($current-bkpt) {
      max-width: breakpoint-get-value($current-bkpt, 'container-max-width');
    }
  }
}

// For a specific breakpoint, define gutters in a media query.
@mixin make-container-gutters($current-bkpt, $breakpoints: $grid-settings) {
  $gutters: get-current-breakpoint-gutters($current-bkpt);
  @include respond-to($current-bkpt) {
    padding-right: $gutters / 2;
    padding-left: $gutters / 2;
  }
}

// Base common row CSS.
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
}

// For a specific breakpoint, define negatives margins in a media query.
@mixin make-row-margins($current-bkpt, $breakpoints: $grid-settings) {
  $gutters: get-current-breakpoint-gutters($current-bkpt);
  @include respond-to($current-bkpt) {
    margin-right: -$gutters / 2;
    margin-left: -$gutters / 2;
  }
}

// @todo, not used. If used, ensure gutter for each breakpoint.
@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

// Make specific column CSS.
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

// Automatic CSS layout for a column with flex.
@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

// Offset for a specific column.
@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  & > * {
    flex: 0 0 100% / $count;
    max-width: 100% / $count;
  }
}
