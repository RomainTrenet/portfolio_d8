// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// @TODO : remove gutter from parameters : we get it for each breakpoint. The same for columns.
//@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
@mixin make-grid-columns($breakpoints: $grid-settings) {
  // Common properties for all breakpoints, excluding gutters.
  // @todo : check.
  %grid-column {
    position: relative;
    width: 100%;
    // @todo DONE : remove common padding for gutters.
  }
  [class^='col'] {
    @extend %grid-column;
  }
  // Or directly by css...

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // @todo : use get value function.
    // @TODO DONE : get current point layout.
    $current-layout: map-get($grid-settings, $breakpoint);
    // @TODO DONE : get gutter from bp
    $gutter: map-get($current-layout, 'gutters');
    // @TODO DONE : get columns from bp
    $columns: map-get($current-layout, 'columns');

    // Allow columns to stretch full width below their breakpoints
    //@for $i from 1 through $columns {
    //  .col#{$infix}-#{$i} {
    //    @extend %grid-column;
    //  }
    //}
    //
    //.col#{$infix},
    //.col#{$infix}-auto {
    //  @extend %grid-column;
    //}

    @include media-breakpoint-up($breakpoint, $breakpoints) {

      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @for $i from 1 through $grid-row-columns {
        .row-cols#{$infix}-#{$i} {
          @include row-cols($i);
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == '' and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}
