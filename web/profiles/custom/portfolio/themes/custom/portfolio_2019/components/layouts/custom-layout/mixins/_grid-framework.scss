// Custom framework grid generation.
//
// Used only by Bootstrap to generate the correct number of grid classes given in $grid-settings.

@mixin make-grid-columns($breakpoints: $grid-settings) {
  // Common properties for all breakpoints.
  [class^='col'] {
    position: relative;
    width: 100%;
  }

  // One only loop, to improve css use of media queries.
  @each $bkpt-name, $breakpoint in $grid-settings {
    // For a specific breakpoint, get gutters and nb columns values.
    $gutters: get-current-breakpoint-gutters($bkpt-name);
    $columns: breakpoint-get-value($bkpt-name, 'columns');

    // Current breakpoint.
    @include respond-to($bkpt-name) {
      // Gutters for columns, for current breakpoint.
      [class^='col'] {
        @include make-gutters($bkpt-name);
      }

      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      [class^='col-#{$bkpt-name}'] {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      // Automatic column for current breakpoint.
      .col-#{$bkpt-name}-auto {
        @include make-col-auto();
      }

      // Make every columns for current breakpoint.
      @for $i from 1 through $columns {
        .row-cols-#{$bkpt-name}-#{$i} {
          @include row-cols($i);
        }

        .col-#{$bkpt-name}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      // Order classes.
      .order-#{$bkpt-name}-first { order: -1; }
      .order-#{$bkpt-name}-last { order: $columns + 1; }
      @for $i from 0 through $columns {
        .order-#{$bkpt-name}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($bkpt-name == '' and $i == 0) { // Avoid emitting useless .offset-0
          .offset-#{$bkpt-name}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }

    }
  }

}
