// Variables
//
// Set variables for this site before a library sets its !default value.
//
// Style guide: sass.variables


// Browser support
//
// For older versions of browsers, some Sass relies on the `support-for()` to
// control whether extra CSS is needed to be output. The `support-for()`
// function and the `$support-for` variable are documented on the [support-for
// homepage](https://github.com/JohnAlbin/support-for).
//
// Style guide: sass.variables.support-for

// Support the same browsers as normalize.css v3.
// Possible keys: chrome, edge, firefox, ie, opera, safari, '*'
$support-for: (
  // IE 9-11
  ie:  9,
  // The last 4 versions of all other browsers.
  '*': -4,
);

// Custom variables
//
//

// Transitions.
$custom-transition-time: .3s;
$custom-transition-timing-function: ease;
$custom-transistion: all $custom-transition-time $custom-transition-timing-function;

//$custom-main-border: 1px;
$custom-main-input-border: 2px;

// Input variables.
// Main input has a 1px border, some hover (like select) have a 2px border.
// So, the padding is taking the difference into consideration, to avoid input to twinkle.
//$custom-main-input-border: $custom-main-border;
$custom-main-input-padding-v: .2rem;
$custom-main-input-padding-h: 1rem;
$custom-main-input-padding: calc(#{$custom-main-input-padding-v} + #{$custom-main-input-border}) calc(#{$custom-main-input-padding-h} + #{$custom-main-input-border});

// Second variant.
$custom-second-input-border: 2px;
$custom-second-input-padding: $custom-main-input-padding-v $custom-main-input-padding-h;

// Select.
$custom-select-radius: 2px;
$custom-select-vertical-padding: 5px;
$select-base-lineh: 18px; // The same as 'custom-base-
$select-pad-h: 1rem;
$select-fs: 12px;

// Font faces, stacks and sizes.
//
// Font styling and line heights are controlled by the several variables that
// used by mixins like `type-layout()`, `margin-top()`, and `margin-bottom()`.
// These variable and mixins are documented on the [Typey
// homepage](https://github.com/jptaranto/typey).
//
// Style guide: sass.variables.typey

// The font size set on the root html element.
$base-font-size:    16px;

// The base line height determines the basic unit of vertical rhythm.
$base-line-height:  24px;

// The IM8 line height method.
// Ratio method allows us to specify line-heights as a multiple of our elements font-size.
// Rhythm method allows us to specify line-heights as a multiple of $base-line-height.
$line-height-method: ratio;
$base-line-height-ratio: 1.5;

// The font sizes in our type hierarchy as tee shirt sizes.
$font-size: (
  xxxxl:            96px,
  xxxl:             72px,
  xxl:              48px,
  xl:               36px,
  l:                20px,
  m:                $base-font-size,
  s:                14px,
  xs:               10px
);

// Typey allows you to alter font weights site-wide with this map.
$font-weight: (
  bold:             bold,
  medium:           500,
  normal:           normal,
  light:            300,
  lighter:          lighter,
);

// The following font family declarations use widely available fonts.
// A user's web browser will look at the comma-separated list and will
// attempt to use each font in turn until it finds one that is available
// on the user's computer. The final "generic" font (sans-serif, serif or
// monospace) hints at what type of font to use if the web browser doesn't
// find any of the fonts in the list.

// Serif font stacks.
$times-new-roman: 'Times New Roman', Times, Georgia, 'DejaVu Serif', serif;
$times:           Times, 'Times New Roman', Georgia, 'DejaVu Serif', serif;
$georgia:         Georgia, 'Times New Roman', 'DejaVu Serif', serif;

// Sans-serif font stacks.
$ssp-reg:         'Source Sans Pro Regular', Helvetica, sans-serif;
$verdana:         Verdana, Tahoma, 'DejaVu Sans', sans-serif;
$tahoma:          Tahoma, Verdana, 'DejaVu Sans', sans-serif;
$helvetica:       Helvetica, Arial, 'Nimbus Sans L', sans-serif;
$arial:           Arial, Helvetica, 'Nimbus Sans L', sans-serif;
$impact:          Impact, 'Arial Narrow', Helvetica, sans-serif;

// Monospace font stacks.
// For an explanation of why "sans-serif" is at the end of this list, see
// http://meyerweb.com/eric/thoughts/2010/02/12/fixed-monospace-sizing/
$menlo:           Menlo, 'DejaVu Sans Mono', 'Ubuntu Mono', Courier, 'Courier New', monospace, sans-serif;

// The font faces you specify in the $typefaces map can be used in the
// typeface() mixin.
$typefaces: (
  body: (
    font-family: $ssp-reg,
  ),
  sans-serif: (
    font-family: $ssp-reg,
    letter-spacing: -.5px,
  ),
  monospace: (
    font-family: $menlo,
  ),
  compact: (
    font-family: $impact,
    weight: bold,
    case: uppercase,
    // We could also specify the following property:
    // letter-spacing: .5px,
  ),
);

/**
 * IM8 typestyles.
 *
 * To use it : @include typeset(heading-1);.
 *
 * Parameters in order (for shorthand) :
 * font-size, line-height, weight, style, case, letter-spacing.
 */
$typestyles: (
  custom-base-input: (
    font-size: s,
    // The same line-height than $select-base-lineh !
    line-height: $select-base-lineh,
    style: normal,
    case: uppercase
  ),

  /*
  @todo : remove examples at the end of the project.
  heading-1: (
    font-size: xl,
    line-height: 1.25,
    weight: bold,
    style: italic,
    case: uppercase,
    letter-spacing: -2px
  ),
  heading-2: (
    font-size: l,
    line-height: 1.25,
    weight: normal
  )

  OR :

  heading-1: xl 1.25 bold uppercase,
  heading-2: l 1.25 normal

  */
);

// Output a horizontal grid to help with debugging typography.
$typey-debug: false;

// The length unit in which to output font size and margin values.
// Supported values: px, em, rem.
$base-unit:         'rem';

// px fallbacks for rem units are needed for IE 8 and earlier.
$rem-fallback:      false;


// Custom Bootstrap - Grid columns
//
// Set the number of columns and specify the width of the gutters.

// @todo : remove or make it default value.
//$grid-columns:                12 !default;
$default-grid-gutter-width:   30px !default;
$grid-row-columns:            6 !default;

// Custom Bootstrap - Grid breakpoints
// @todo : explain.
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.
$grid-settings: (
  xxxs: (
    size: 0,
    bkpt-option: 'no-query' true,
    generate-class: false,
    columns: 6,
    gutters: 20px,
  ),
  xxs: (
    size: 320px,
    bkpt-option: 'no-query' true,
    generate-class: false,
    columns: 6,
    gutters: 20px,
  ),
  xs: (
    size: 576px,
    container-max-width: 540px,
    bkpt-option: 'no-query' true,
    generate-class: true,
    columns: 6,
    gutters: 20px,
  ),
  s: (
    size: 768px,
    container-max-width: 720px,
    bkpt-option: 'no-query' true,
    generate-class: true,
    columns: 12,
    gutters: 30px,
  ),
  m: (
    size: 992px,
    container-max-width: 960px,
    bkpt-option: 'no-query' true,
    generate-class: true,
    columns: 12,
    gutters: 30px,
  ),
  l: (
    size: 1200px,
    container-max-width: 1140px,
    bkpt-option: 'no-query' true,
    generate-class: true,
    columns: 12,
    gutters: 40px,
  ),
  xl: (
    size: 1400px,
    bkpt-option: 'no-query' true,
    generate-class: false,
    columns: 12,
    gutters: 50px,
  ),
);

// @todo : test. Removed to delete $grid-breakpoints.
//@include _assert-ascending($grid-breakpoints, '$grid-breakpoints');
//@include _assert-starts-at-zero($grid-breakpoints, '$grid-breakpoints');

// Breakpoints
//
// Use the `respond-to()` mixin to use named breakpoints. Documentation is
// available in the [Breakpoint wiki
// pages](https://github.com/at-import/breakpoint/wiki/Respond-To).
//
// Style guide: sass.variables.breakpoints

/**
 * Declare custom breakpoints from grid settings variable.
 *
 * Same breakoints as in js.
 */
@import '../layouts/custom-breakpoints/breakpoints';
@include custom-make-breakpoint($grid-settings);

// Output media queries where the above px are converted to ems.
// @include breakpoint-set('to ems', true);

// Zen grids
//
// The default grid system is built using the Zen Grids sass module. Full
// documentation is available on the [Zen Grids website](http://zengrids.com/).
//
// Note: if you are more comfortable using another grid system, you can easily
// remove Zen Grids and its layouts.
//
// Style guide: sass.variables.zen-grids

// These are needed for all breakpoints on all layouts.
$zen-auto-include-grid-item-base: false;
$zen-box-sizing: universal-border-box;

// See $include-rtl below.
$zen-rtl-selector: '[dir="rtl"]';


// Miscellaneous variables
//
// `$indent-amount` controls the amount lists, blockquotes and comments are indented.
//
// `$include-rtl` controls whether RTL styles are output. Rather than include a separate `*-rtl.css` file, Zen 6 uses Drupal 8's standard `[dir="rtl"]` selector for RTL language support.
//
// weight: 10
//
// Style guide: sass.variables.misc

$indent-amount: 2 * $base-font-size;

$include-rtl: true;
// Automatically turn off Zen Grids' RTL support if $include-rtl is false.
@if not $include-rtl {
  $zen-rtl-selector: false !global;
}
